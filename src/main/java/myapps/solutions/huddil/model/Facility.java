package myapps.solutions.huddil.model;
// Generated Nov 17, 2017 4:19:00 PM by Hibernate Tools 5.2.1.Final

import static javax.persistence.GenerationType.IDENTITY;

import java.math.BigInteger;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.ColumnResult;
import javax.persistence.ConstructorResult;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SqlResultSetMapping;
import javax.persistence.SqlResultSetMappings;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.hibernate.annotations.OrderBy;

import com.fasterxml.jackson.annotation.JsonIgnore;

import myapps.solutions.huddil.utils.FacilityValidation;

/**
 * Facility generated by hbm2java
 */
@SqlResultSetMappings({ @SqlResultSetMapping(name = "facilityFilterView", classes = {
		@ConstructorResult(targetClass = FacilityFilterResult.class, columns = { @ColumnResult(name = "id"),
				@ColumnResult(name = "title"), @ColumnResult(name = "description"), @ColumnResult(name = "capacity"),
				@ColumnResult(name = "latitude"), @ColumnResult(name = "longtitude"),
				@ColumnResult(name = "costPerHour"), @ColumnResult(name = "costPerDay"),
				@ColumnResult(name = "costPerMonth"), @ColumnResult(name = "averageRating"),
				@ColumnResult(name = "size"), @ColumnResult(name = "status"), @ColumnResult(name = "contactNo"),
				@ColumnResult(name = "alternateContactNo"), @ColumnResult(name = "emailId"),
				@ColumnResult(name = "alternateEmailId"), @ColumnResult(name = "thumbnail"),
				@ColumnResult(name = "typeName"), @ColumnResult(name = "city"), @ColumnResult(name = "locality"),
				@ColumnResult(name = "locationName"), @ColumnResult(name = "landmark"), @ColumnResult(name = "address"),
				@ColumnResult(name = "nearBy"), @ColumnResult(name = "Amenities"),
				@ColumnResult(name = "imgPath")/*
												 * , @ColumnResult(name = "favorite")
												 */ }) }),
		@SqlResultSetMapping(name = "adminFacilityDB", classes = {
				@ConstructorResult(targetClass = AdminFacilityDB.class, columns = { @ColumnResult(name = "count"),
						@ColumnResult(name = "status") }) }),

		@SqlResultSetMapping(name = "sendEnquiry", classes = {
				@ConstructorResult(targetClass = Facility.class, columns = { @ColumnResult(name = "title"),
						@ColumnResult(name = "localityName"), @ColumnResult(name = "cityName"),
						@ColumnResult(name = "name"), @ColumnResult(name = "emailId"),
						@ColumnResult(name = "alternateEmailId"), @ColumnResult(name = "spEmail"),
						@ColumnResult(name = "displayName") }) }),
		@SqlResultSetMapping(name = "savedFacility", classes = {
				@ConstructorResult(targetClass = SavedFacility.class, columns = { @ColumnResult(name = "id"),
						@ColumnResult(name = "title"), @ColumnResult(name = "cityName"),
						@ColumnResult(name = "typeName"), @ColumnResult(name = "name") }) }),
		@SqlResultSetMapping(name = "bookingConfirm", classes = {
				@ConstructorResult(targetClass = Facility.class, columns = { @ColumnResult(name = "title"),
						@ColumnResult(name = "typeName"), @ColumnResult(name = "cityName"),
						@ColumnResult(name = "localityName"), @ColumnResult(name = "address"),
						@ColumnResult(name = "spName"), @ColumnResult(name = "spEmailId"),
						@ColumnResult(name = "spMobileNo"), @ColumnResult(name = "spMobileVerified"),
						@ColumnResult(name = "cName"), @ColumnResult(name = "cEmailId"),
						@ColumnResult(name = "cMobileNo"), @ColumnResult(name = "cMobileVerified") }) }),
		@SqlResultSetMapping(name = "notification_facility", classes = {
				@ConstructorResult(targetClass = Facility.class, columns = { @ColumnResult(name = "title"),
						@ColumnResult(name = "cityName"), @ColumnResult(name = "localityName"),
						@ColumnResult(name = "address") }) }),
		@SqlResultSetMapping(name = "siteMap", classes = { @ConstructorResult(targetClass = SiteMap.class, columns = {
				@ColumnResult(name = "id"), @ColumnResult(name = "facilityDetails") }) }) })

@FacilityValidation
@Entity
@Table(name = "facility", catalog = "huddil")
public class Facility implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -3003329676409253919L;
	private Integer id;
	private String city;
	private FacilityCancellationCharges facilityCancellationCharges;
	private String facilityType;
	private String locality;
	private Location location;
	private UserPref userPrefByAdvUserId;
	private int userPrefBySpUserId;
	private String title;
	private String description;
	private int capacity;
	private double latitude;
	private double longtitude;
	private double costPerHour;
	private double costPerDay;
	private double costPerMonth;
	private double averageRating;
	private int size;
	private int status;
	private String contactNo;
	private String alternateContactNo;
	private int paymnetType;
	private String emailId;
	private String alternateEmailId;
	private String thumbnail;
	// private Set<Booking> bookings = new HashSet<Booking>(0);
	private Set<BookingHistory> bookingHistories = new HashSet<BookingHistory>(0);
	private Set<FacilityPhoto> facilityPhotos = new HashSet<FacilityPhoto>(0);
	private Set<Favorites> favoriteses = new HashSet<Favorites>(0);
	private Set<Review> reviews = new HashSet<Review>(0);
	private Set<FacilityAdditionalCost> facilityAdditionalCosts = new HashSet<FacilityAdditionalCost>(0);
	private Set<Cancellation> cancellations = new HashSet<Cancellation>(0);
	private Set<FacilityAmenity> facilityAmenities = new HashSet<FacilityAmenity>(0);
	private Set<FacilityTiming> facilityTimings = new HashSet<FacilityTiming>(0);
	private Set<FacilityUnderMaintenance> facilityUnderMaintenances = new HashSet<FacilityUnderMaintenance>(0);
	private Set<FacilityHistory> facilityHistories = new HashSet<FacilityHistory>(0);
	private Set<FacilityOffers> facilityOfferses = new HashSet<FacilityOffers>(0);
	private int huddleVerified;
	private boolean favorites;
	private UserPref sp;
	private UserPref consumer;
	private boolean save;

	public Facility() {
	}

	public Facility(int id) {
		this.id = id;
	}

	public Facility(String city, FacilityCancellationCharges facilityCancellationCharges, String facilityType,
			String locality, Location location, int userPrefBySpUserId, String title, String description, int capacity,
			double latitude, double longtitude, double costPerHour, double costPerDay, double costPerMonth,
			double averageRating, int size, int status, String contactNo, String alternateContactNo, int paymnetType,
			String emailId, String alternateEmailId, String thumbnail) {
		this.city = city;
		this.facilityCancellationCharges = facilityCancellationCharges;
		this.facilityType = facilityType;
		this.locality = locality;
		this.location = location;
		this.userPrefBySpUserId = userPrefBySpUserId;
		this.title = title;
		this.description = description;
		this.capacity = capacity;
		this.latitude = latitude;
		this.longtitude = longtitude;
		this.costPerHour = costPerHour;
		this.costPerDay = costPerDay;
		this.costPerMonth = costPerMonth;
		this.averageRating = averageRating;
		this.size = size;
		this.status = status;
		this.contactNo = contactNo;
		this.paymnetType = paymnetType;
		this.emailId = emailId;
		this.thumbnail = thumbnail;
	}

	public Facility(String city, FacilityCancellationCharges facilityCancellationCharges, String facilityType,
			String locality, Location location, UserPref userPrefByAdvUserId, int userPrefBySpUserId, String title,
			String description, int capacity, double latitude, double longtitude, double costPerHour, double costPerDay,
			double costPerMonth, double averageRating, int size, int status, String contactNo,
			String alternateContactNo, int paymnetType, String emailId, String alternateEmailId, String thumbnail,
			Set<Booking> bookings, Set<BookingHistory> bookingHistories, Set<FacilityPhoto> facilityPhotos,
			Set<Favorites> favoriteses, Set<Review> reviews, Set<FacilityAdditionalCost> facilityAdditionalCosts,
			Set<Cancellation> cancellations, Set<FacilityAmenity> facilityAmenities,
			Set<FacilityTiming> facilityTimings, Set<FacilityUnderMaintenance> facilityUnderMaintenances,
			Set<FacilityHistory> facilityHistories, Set<FacilityOffers> facilityOfferses) {
		this.city = city;
		this.facilityCancellationCharges = facilityCancellationCharges;
		this.facilityType = facilityType;
		this.locality = locality;
		this.location = location;
		this.userPrefByAdvUserId = userPrefByAdvUserId;
		this.userPrefBySpUserId = userPrefBySpUserId;
		this.title = title;
		this.description = description;
		this.capacity = capacity;
		this.latitude = latitude;
		this.longtitude = longtitude;
		this.costPerHour = costPerHour;
		this.costPerDay = costPerDay;
		this.costPerMonth = costPerMonth;
		this.averageRating = averageRating;
		this.size = size;
		this.status = status;
		this.contactNo = contactNo;
		this.paymnetType = paymnetType;
		this.emailId = emailId;
		this.thumbnail = thumbnail;
		// this.bookings = bookings;
		this.bookingHistories = bookingHistories;
		this.facilityPhotos = facilityPhotos;
		this.favoriteses = favoriteses;
		this.reviews = reviews;
		this.facilityAdditionalCosts = facilityAdditionalCosts;
		this.cancellations = cancellations;
		this.facilityAmenities = facilityAmenities;
		this.facilityTimings = facilityTimings;
		this.facilityUnderMaintenances = facilityUnderMaintenances;
		this.facilityHistories = facilityHistories;
		this.facilityOfferses = facilityOfferses;
	}

	public Facility(String title, String localityName, String cityName, String name, String emailId,
			String alternateEmailId, String spEmail, String displayName) {
		this.title = title;
		this.locality = localityName;
		this.city = cityName;
		this.location = new Location(name);
		this.emailId = emailId;
		this.alternateEmailId = alternateEmailId;
		this.sp = new UserPref(0, spEmail, displayName);
	}

	public Facility(String title, String typeName, String cityName, String localityName, String address, String spName,
			String spEmailId, String spMobileNo, boolean spMobileVerified, String cName, String cEmailId,
			String cMobileNo, BigInteger cMobileVerified) {
		if (title.length() > 20)
			this.title = title.substring(0, 17) + "...";
		else
			this.title = title;
		this.facilityType = typeName;
		this.city = cityName;
		this.locality = localityName;
		this.location = new Location("", address);
		this.sp = new UserPref(spName, spEmailId, spMobileNo, spMobileVerified);
		this.consumer = new UserPref(cName, cEmailId, cMobileNo, cMobileVerified.intValue() == 1);
	}

	public Facility(String title, String cityName, String localityName, String address) {
		this.title = title;
		this.city = cityName;
		this.locality = localityName;
		this.location = new Location("", address);
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	/*
	 * @ManyToOne(fetch = FetchType.LAZY)
	 * 
	 * @JoinColumn(name = "cityName", nullable = false)
	 */
	@Column(name = "cityName", nullable = false)
	public String getCity() {
		return this.city;
	}

	public void setCity(String city) {
		this.city = city;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "cancellationPolicyId", nullable = false)
	public FacilityCancellationCharges getFacilityCancellationCharges() {
		return this.facilityCancellationCharges;
	}

	public void setFacilityCancellationCharges(FacilityCancellationCharges facilityCancellationCharges) {
		this.facilityCancellationCharges = facilityCancellationCharges;
	}

	/*
	 * @ManyToOne(fetch = FetchType.LAZY)
	 * 
	 * @JoinColumn(name = "typeName", nullable = false)
	 */
	@Column(name = "typeName", nullable = false)
	public String getFacilityType() {
		return this.facilityType;
	}

	public void setFacilityType(String facilityType) {
		this.facilityType = facilityType;
	}

	/*
	 * @ManyToOne(fetch = FetchType.LAZY)
	 * 
	 * @JoinColumn(name = "localityName", nullable = false)
	 */
	@Column(name = "localityName", nullable = false)
	public String getLocality() {
		return this.locality;
	}

	public void setLocality(String locality) {
		this.locality = locality;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "locationId", nullable = false)
	public Location getLocation() {
		return this.location;
	}

	public void setLocation(Location location) {
		this.location = location;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "advUserId")
	@JsonIgnore
	public UserPref getUserPrefByAdvUserId() {
		return this.userPrefByAdvUserId;
	}

	public void setUserPrefByAdvUserId(UserPref userPrefByAdvUserId) {
		this.userPrefByAdvUserId = userPrefByAdvUserId;
	}

	// @ManyToOne(fetch = FetchType.LAZY)
	@Column(name = "spUserId", nullable = false)
	// @JsonIgnore
	public int getUserPrefBySpUserId() {
		return this.userPrefBySpUserId;
	}

	public void setUserPrefBySpUserId(int userPrefBySpUserId) {
		this.userPrefBySpUserId = userPrefBySpUserId;
	}

	@Column(name = "title", nullable = false, length = 45)
	public String getTitle() {
		return this.title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	@Column(name = "description", nullable = false, length = 21000)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Column(name = "capacity", nullable = false)
	public int getCapacity() {
		return this.capacity;
	}

	public void setCapacity(int capacity) {
		this.capacity = capacity;
	}

	@Column(name = "latitude", nullable = false, precision = 22, scale = 0)
	public double getLatitude() {
		return this.latitude;
	}

	public void setLatitude(double latitude) {
		this.latitude = latitude;
	}

	@Column(name = "longtitude", nullable = false, precision = 22, scale = 0)
	public double getLongtitude() {
		return this.longtitude;
	}

	public void setLongtitude(double longtitude) {
		this.longtitude = longtitude;
	}

	@Column(name = "costPerHour", nullable = false, precision = 22, scale = 0)
	public double getCostPerHour() {
		return this.costPerHour;
	}

	public void setCostPerHour(double costPerHour) {
		this.costPerHour = costPerHour;
	}

	@Column(name = "costPerDay", nullable = false, precision = 22, scale = 0)
	public double getCostPerDay() {
		return this.costPerDay;
	}

	public void setCostPerDay(double costPerDay) {
		this.costPerDay = costPerDay;
	}

	@Column(name = "costPerMonth", nullable = false, precision = 22, scale = 0)
	public double getCostPerMonth() {
		return this.costPerMonth;
	}

	public void setCostPerMonth(double costPerMonth) {
		this.costPerMonth = costPerMonth;
	}

	@Column(name = "averageRating", nullable = false, precision = 22, scale = 0)
	public double getAverageRating() {
		return this.averageRating;
	}

	public void setAverageRating(double averageRating) {
		this.averageRating = averageRating;
	}

	@Column(name = "size", nullable = false)
	public int getSize() {
		return this.size;
	}

	public void setSize(int size) {
		this.size = size;
	}

	@Column(name = "status", nullable = false)
	public int getStatus() {
		return this.status;
	}

	public void setStatus(int status) {
		this.status = status;
	}

	@Column(name = "contactNo", nullable = false, length = 45)
	public String getContactNo() {
		return this.contactNo;
	}

	public void setContactNo(String contactNo) {
		this.contactNo = contactNo;
	}

	@Column(name = "alternateContactNo", nullable = false, length = 45)
	public String getAlternateContactNo() {
		return this.alternateContactNo;
	}

	public void setAlternateContactNo(String alternateContactNo) {
		this.alternateContactNo = alternateContactNo;
	}

	@Column(name = "paymnetType", nullable = false)
	public int getPaymnetType() {
		return this.paymnetType;
	}

	public void setPaymnetType(int paymnetType) {
		this.paymnetType = paymnetType;
	}

	@Column(name = "emailId", nullable = false, length = 45)
	public String getEmailId() {
		return this.emailId;
	}

	public void setEmailId(String emailId) {
		this.emailId = emailId;
	}

	@Column(name = "alternateEmailId", nullable = false, length = 45)
	public String getAlternateEmailId() {
		return this.alternateEmailId;
	}

	public void setAlternateEmailId(String alternateEmailId) {
		this.alternateEmailId = alternateEmailId;
	}

	@Column(name = "thumbnail", nullable = false)
	public String getThumbnail() {
		return this.thumbnail;
	}

	public void setThumbnail(String thumbnail) {
		this.thumbnail = thumbnail;
	}

	/*
	 * @OneToMany(fetch = FetchType.LAZY, mappedBy = "facility")
	 * 
	 * @JsonIgnore public Set<Booking> getBookings() { return this.bookings; }
	 * public void setBookings(Set<Booking> bookings) { this.bookings = bookings; }
	 */

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "facility")
	@JsonIgnore
	public Set<BookingHistory> getBookingHistories() {
		return this.bookingHistories;
	}

	public void setBookingHistories(Set<BookingHistory> bookingHistories) {
		this.bookingHistories = bookingHistories;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "facility", cascade = CascadeType.ALL)
	public Set<FacilityPhoto> getFacilityPhotos() {
		return this.facilityPhotos;
	}

	public void setFacilityPhotos(Set<FacilityPhoto> facilityPhotos) {
		this.facilityPhotos = facilityPhotos;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "facility")
	@JsonIgnore
	public Set<Favorites> getFavoriteses() {
		return this.favoriteses;
	}

	public void setFavoriteses(Set<Favorites> favoriteses) {
		this.favoriteses = favoriteses;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "facility")
	@JsonIgnore
	public Set<Review> getReviews() {
		return this.reviews;
	}

	public void setReviews(Set<Review> reviews) {
		this.reviews = reviews;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "facility")
	public Set<FacilityAdditionalCost> getFacilityAdditionalCosts() {
		return this.facilityAdditionalCosts;
	}

	public void setFacilityAdditionalCosts(Set<FacilityAdditionalCost> facilityAdditionalCosts) {
		this.facilityAdditionalCosts = facilityAdditionalCosts;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "facility")
	@JsonIgnore
	public Set<Cancellation> getCancellations() {
		return this.cancellations;
	}

	public void setCancellations(Set<Cancellation> cancellations) {
		this.cancellations = cancellations;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "facility", cascade = CascadeType.ALL)
	@OrderBy(clause = "id ASC")
	public Set<FacilityAmenity> getFacilityAmenities() {
		return this.facilityAmenities;
	}

	public void setFacilityAmenities(Set<FacilityAmenity> facilityAmenities) {
		this.facilityAmenities = facilityAmenities;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "facility", cascade = CascadeType.ALL)
	@OrderBy(clause = "weekDay ASC")
	public Set<FacilityTiming> getFacilityTimings() {
		return this.facilityTimings;
	}

	public void setFacilityTimings(Set<FacilityTiming> facilityTimings) {
		this.facilityTimings = facilityTimings;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "facility")
	@JsonIgnore
	public Set<FacilityUnderMaintenance> getFacilityUnderMaintenances() {
		return this.facilityUnderMaintenances;
	}

	public void setFacilityUnderMaintenances(Set<FacilityUnderMaintenance> facilityUnderMaintenances) {
		this.facilityUnderMaintenances = facilityUnderMaintenances;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "facility")
	@JsonIgnore
	public Set<FacilityHistory> getFacilityHistories() {
		return this.facilityHistories;
	}

	public void setFacilityHistories(Set<FacilityHistory> facilityHistories) {
		this.facilityHistories = facilityHistories;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "facility", cascade = CascadeType.ALL)
	@OrderBy(clause = "id ASC")
	public Set<FacilityOffers> getFacilityOfferses() {
		return this.facilityOfferses;
	}

	public void setFacilityOfferses(Set<FacilityOffers> facilityOfferses) {
		this.facilityOfferses = facilityOfferses;
	}

	@Transient
	public int getHuddleVerified() {
		return huddleVerified;
	}

	public void setHuddleVerified(int huddleVerified) {
		this.huddleVerified = huddleVerified;
	}

	@Transient
	public boolean isFavorites() {
		return favorites;
	}

	public void setFavorites(boolean favorites) {
		this.favorites = favorites;
	}

	@Transient
	public UserPref getSp() {
		return sp;
	}

	public void setSp(UserPref sp) {
		this.sp = sp;
	}

	@Transient
	public boolean isSave() {
		return save;
	}

	public void setSave(boolean save) {
		this.save = save;
	}

	@Transient
	public UserPref getConsumer() {
		return consumer;
	}

	public void setConsumer(UserPref consumer) {
		this.consumer = consumer;
	}

}
