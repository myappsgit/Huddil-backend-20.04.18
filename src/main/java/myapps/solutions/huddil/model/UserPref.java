package myapps.solutions.huddil.model;
// Generated Nov 17, 2017 4:19:00 PM by Hibernate Tools 5.2.1.Final

import java.util.ArrayList;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.ColumnResult;
import javax.persistence.ConstructorResult;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.SqlResultSetMapping;
import javax.persistence.SqlResultSetMappings;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import com.fasterxml.jackson.annotation.JsonIgnore;

/**
 * UserPref generated by hbm2java
 */
@Entity
@Table(name = "user_pref", catalog = "huddil", uniqueConstraints = { @UniqueConstraint(columnNames = "emailId"),
		@UniqueConstraint(columnNames = "sessionId") })

@SqlResultSetMappings({
		@SqlResultSetMapping(name = "user_search_details", classes = {
				@ConstructorResult(targetClass = UserSearchResult.class, columns = { @ColumnResult(name = "id"),
						@ColumnResult(name = "name"), @ColumnResult(name = "emailId"), @ColumnResult(name = "mobileNo"),
						@ColumnResult(name = "isActive"), @ColumnResult(name = "userType") }) }),
		@SqlResultSetMapping(name = "user_pref", classes = {
				@ConstructorResult(targetClass = UserSearchResult.class, columns = { @ColumnResult(name = "id"),
						@ColumnResult(name = "name"), @ColumnResult(name = "emailId"), @ColumnResult(name = "mobileNo"),
						@ColumnResult(name = "mobileNoVerified"), @ColumnResult(name = "userType") }) }),
		@SqlResultSetMapping(name = "adminUserDB", classes = {
				@ConstructorResult(targetClass = AdminUserDB.class, columns = { @ColumnResult(name = "type"),
						@ColumnResult(name = "count"), @ColumnResult(name = "status") }) }),
		@SqlResultSetMapping(name = "contactInfo", classes = {
				@ConstructorResult(targetClass = ContactInfo.class, columns = { @ColumnResult(name = "emailId"),
						@ColumnResult(name = "phoneNo") }) }),
		@SqlResultSetMapping(name = "userDetails", classes = {
				@ConstructorResult(targetClass = UserDetails.class, columns = { @ColumnResult(name = "id"),
						@ColumnResult(name = "addressingName"), @ColumnResult(name = "emailId"),
						@ColumnResult(name = "companyName"), @ColumnResult(name = "mobileNo"),
						@ColumnResult(name = "address"), @ColumnResult(name = "city"), @ColumnResult(name = "country"),
						@ColumnResult(name = "pincode"), @ColumnResult(name = "website"),
						@ColumnResult(name = "isActive"), @ColumnResult(name = "signedUp") }) }) })
public class UserPref implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -5281772007399064440L;
	private int userId;
	private String city;
	private Integer userType;
	private String sessionId;
	private String emailId;
	private String mobileNo;
	private String displayName;
	private String comments;
	private String blockedFacilities;
	private boolean mobileNoVerified;
	private BankDetails bankDetails;
	private List<Facility> facilitiesForAdvUserId = new ArrayList<Facility>(0);
	private List<Favorites> favoriteses = new ArrayList<Favorites>(0);
	private List<Cancellation> cancellationsForBookedUserId = new ArrayList<Cancellation>(0);
	private List<Events> eventses = new ArrayList<Events>(0);
	private List<MultiTenant> multiTenants = new ArrayList<MultiTenant>(0);
	private List<Location> locations = new ArrayList<Location>(0);
	private List<Meeting> meetings = new ArrayList<Meeting>(0);
	private List<FacilityHistory> facilityHistories = new ArrayList<FacilityHistory>(0);
	private List<ParticipantsTeam> participantsTeams = new ArrayList<ParticipantsTeam>(0);
	private List<Cancellation> cancellationsForCancelledUserId = new ArrayList<Cancellation>(0);
	private List<Facility> facilitiesForSpUserId = new ArrayList<Facility>(0);
	private List<BookingHistory> bookingHistories = new ArrayList<BookingHistory>(0);
	private List<Review> reviews = new ArrayList<Review>(0);
	// private List<Booking> bookings = new ArrayList<Booking>(0);

	public UserPref() {
	}

	public UserPref(int userId, String emailId, String displayName) {
		this.userId = userId;
		this.emailId = emailId;
		this.displayName = displayName;
	}

	public UserPref(int userId, String sessionId, String emailId, String mobileNo, String displayName,
			boolean mobileNoVerified) {
		this.userId = userId;
		this.sessionId = sessionId;
		this.emailId = emailId;
		this.mobileNo = mobileNo;
		this.displayName = displayName;
		this.mobileNoVerified = mobileNoVerified;
	}

	public UserPref(int userId, String city, Integer userType, String sessionId, String emailId, String mobileNo,
			String displayName, String comments, String blockedFacilities, boolean mobileNoVerified,
			BankDetails bankDetails, List<Facility> facilitiesForAdvUserId, List<Favorites> favoriteses,
			List<Cancellation> cancellationsForBookedUserId, List<Events> eventses, List<MultiTenant> multiTenants,
			List<Meeting> meetings, List<Location> locations, List<FacilityHistory> facilityHistories,
			List<ParticipantsTeam> participantsTeams, List<Cancellation> cancellationsForCancelledUserId,
			List<Facility> facilitiesForSpUserId, List<BookingHistory> bookingHistories, List<Review> reviews,
			List<Booking> bookings) {
		this.userId = userId;
		this.city = city;
		this.userType = userType;
		this.sessionId = sessionId;
		this.emailId = emailId;
		this.mobileNo = mobileNo;
		this.displayName = displayName;
		this.comments = comments;
		this.blockedFacilities = blockedFacilities;
		this.mobileNoVerified = mobileNoVerified;
		this.bankDetails = bankDetails;
		this.facilitiesForAdvUserId = facilitiesForAdvUserId;
		this.favoriteses = favoriteses;
		this.cancellationsForBookedUserId = cancellationsForBookedUserId;
		this.eventses = eventses;
		this.multiTenants = multiTenants;
		this.locations = locations;
		this.meetings = meetings;
		this.facilityHistories = facilityHistories;
		this.participantsTeams = participantsTeams;
		this.cancellationsForCancelledUserId = cancellationsForCancelledUserId;
		this.facilitiesForSpUserId = facilitiesForSpUserId;
		this.bookingHistories = bookingHistories;
		this.reviews = reviews;
		// this.bookings = bookings;
	}

	public UserPref(String displayName, String emailId, String mobileNo, boolean mobileVerified) {
		this.displayName = displayName;
		this.emailId = emailId;
		this.mobileNo = mobileNo;
		this.mobileNoVerified = mobileVerified;
	}

	@Id

	@Column(name = "userId", unique = true, nullable = false)
	public int getUserId() {
		return this.userId;
	}

	public void setUserId(int userId) {
		this.userId = userId;
	}

	/*
	 * @ManyToOne(fetch = FetchType.LAZY)
	 * 
	 * @JoinColumn(name = "lastCity")
	 */
	@Column(name = "lastCity", nullable = false)
	public String getCity() {
		return this.city;
	}

	public void setCity(String city) {
		this.city = city;
	}

	/*
	 * @ManyToOne(fetch = FetchType.LAZY)
	 * 
	 * @JoinColumn(name = "userType", unique = true)
	 */
	@Column(name = "userType", nullable = false)
	public Integer getUserType() {
		return this.userType;
	}

	public void setUserType(Integer userType) {
		this.userType = userType;
	}

	@Column(name = "sessionId", unique = true, nullable = false, length = 128)
	@JsonIgnore
	public String getSessionId() {
		return this.sessionId;
	}

	public void setSessionId(String sessionId) {
		this.sessionId = sessionId;
	}

	@Column(name = "emailId", unique = true, nullable = false, length = 45)
	public String getEmailId() {
		return this.emailId;
	}

	public void setEmailId(String emailId) {
		this.emailId = emailId;
	}

	@Column(name = "mobileNo", nullable = false, length = 45)
	public String getMobileNo() {
		return this.mobileNo;
	}

	public void setMobileNo(String mobileNo) {
		this.mobileNo = mobileNo;
	}

	@Column(name = "displayName", nullable = false, length = 45)
	public String getDisplayName() {
		return this.displayName;
	}

	public void setDisplayName(String displayName) {
		this.displayName = displayName;
	}

	@Column(name = "comments", length = 16777215)
	public String getComments() {
		return this.comments;
	}

	public void setComments(String comments) {
		this.comments = comments;
	}

	@Column(name = "blockedFacilities")
	public String getBlockedFacilities() {
		return this.blockedFacilities;
	}

	public void setBlockedFacilities(String blockedFacilities) {
		this.blockedFacilities = blockedFacilities;
	}

	@Column(name = "mobileNoVerified", nullable = false)
	public boolean isMobileNoVerified() {
		return this.mobileNoVerified;
	}

	public void setMobileNoVerified(boolean mobileNoVerified) {
		this.mobileNoVerified = mobileNoVerified;
	}

	@OneToOne(fetch = FetchType.LAZY, mappedBy = "userPref")
	@JsonIgnore
	public BankDetails getBankDetails() {
		return this.bankDetails;
	}

	public void setBankDetails(BankDetails bankDetails) {
		this.bankDetails = bankDetails;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "userPrefByAdvUserId")
	// @JsonProperty(access = Access.WRITE_ONLY)
	@JsonIgnore
	public List<Facility> getFacilitiesForAdvUserId() {
		return this.facilitiesForAdvUserId;
	}

	public void setFacilitiesForAdvUserId(List<Facility> facilitiesForAdvUserId) {
		this.facilitiesForAdvUserId = facilitiesForAdvUserId;
	}

	@JsonIgnore
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userPref")
	public List<Favorites> getFavoriteses() {
		return this.favoriteses;
	}

	public void setFavoriteses(List<Favorites> favoriteses) {
		this.favoriteses = favoriteses;
	}

	@JsonIgnore
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userPrefByBookedUserId")
	public List<Cancellation> getCancellationsForBookedUserId() {
		return this.cancellationsForBookedUserId;
	}

	public void setCancellationsForBookedUserId(List<Cancellation> cancellationsForBookedUserId) {
		this.cancellationsForBookedUserId = cancellationsForBookedUserId;
	}

	@JsonIgnore
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userPref")
	public List<Events> getEventses() {
		return this.eventses;
	}

	public void setEventses(List<Events> eventses) {
		this.eventses = eventses;
	}

	@JsonIgnore
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userPref")
	public List<MultiTenant> getMultiTenants() {
		return this.multiTenants;
	}

	public void setMultiTenants(List<MultiTenant> multiTenants) {
		this.multiTenants = multiTenants;
	}

	@JsonIgnore
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userPref")
	public List<Location> getLocations() {
		return this.locations;
	}

	public void setLocations(List<Location> locations) {
		this.locations = locations;
	}

	@JsonIgnore
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userPref")
	public List<Meeting> getMeetings() {
		return this.meetings;
	}

	public void setMeetings(List<Meeting> meetings) {
		this.meetings = meetings;
	}

	@JsonIgnore
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userPref")
	public List<FacilityHistory> getFacilityHistories() {
		return this.facilityHistories;
	}

	public void setFacilityHistories(List<FacilityHistory> facilityHistories) {
		this.facilityHistories = facilityHistories;
	}

	@JsonIgnore
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userPref")
	public List<ParticipantsTeam> getParticipantsTeams() {
		return this.participantsTeams;
	}

	public void setParticipantsTeams(List<ParticipantsTeam> participantsTeams) {
		this.participantsTeams = participantsTeams;
	}

	@JsonIgnore
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userPrefByCancelledUserId")
	public List<Cancellation> getCancellationsForCancelledUserId() {
		return this.cancellationsForCancelledUserId;
	}

	public void setCancellationsForCancelledUserId(List<Cancellation> cancellationsForCancelledUserId) {
		this.cancellationsForCancelledUserId = cancellationsForCancelledUserId;
	}

	@JsonIgnore
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userPrefBySpUserId")
	public List<Facility> getFacilitiesForSpUserId() {
		return this.facilitiesForSpUserId;
	}

	public void setFacilitiesForSpUserId(List<Facility> facilitiesForSpUserId) {
		this.facilitiesForSpUserId = facilitiesForSpUserId;
	}

	@JsonIgnore
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userPref")
	public List<BookingHistory> getBookingHistories() {
		return this.bookingHistories;
	}

	public void setBookingHistories(List<BookingHistory> bookingHistories) {
		this.bookingHistories = bookingHistories;
	}

	@JsonIgnore
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userPref")
	public List<Review> getReviews() {
		return this.reviews;
	}

	public void setReviews(List<Review> reviews) {
		this.reviews = reviews;
	}

	/*
	 * @JsonIgnore
	 * 
	 * @OneToMany(fetch = FetchType.LAZY, mappedBy = "userPref") public
	 * List<Booking> getBookings() { return this.bookings; }
	 * 
	 * public void setBookings(List<Booking> bookings) { this.bookings = bookings; }
	 */

}
